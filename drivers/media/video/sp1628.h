#include <linux/atomisp_platform.h>
#include <linux/atomisp.h>
#include <linux/delay.h>
#include <linux/i2c.h>
#include <linux/kernel.h>
#include <linux/spinlock.h>
#include <linux/videodev2.h>
#include <linux/v4l2-mediabus.h>
#include <linux/types.h>
#include <media/media-entity.h>
#include <media/v4l2-chip-ident.h>
#include <media/v4l2-device.h>
#include <media/v4l2-subdev.h>

#define	SP1628_NAME	"sp1628"
#define MAX_FMTS		1

#define SP1628_FOCAL_LENGTH_NUM  208  
#define SP1628_FOCAL_LENGTH_DEM  100
/*
 * focal length bits definition:
 * bits 31-16: numerator, bits 15-0: denominator
 */
#define SP1628_FOCAL_LENGTH_DEFAULT  0x0d00064 //0xA60064   modify by zte yaolingling for focus length

/*
 * current f-number bits definition:
 * bits 31-16: numerator, bits 15-0: denominator
 */
#define SP1628_F_NUMBER_DEFAULT 0x1200064

/*
 * f-number range bits definition:
 * bits 31-24: max f-number numerator
 * bits 23-16: max f-number denominator
 * bits 15-8: min f-number numerator
 * bits 7-0: min f-number denominator
 */
#define SP1628_F_NUMBER_RANGE 0x1D0a1D0a
struct regval_list {
	u16 reg_num;
	u8 value;
};

/* Misc. structures */
struct sp1628_reg {
	u16				reg;
	u8				val;
};
static const struct sp1628_reg sp1628_defaults[] = {
	
	{0xfd,0x00},
	{0x91,0x00},
	//{0x92,0x81}, 
	{0x98,0x2c},// 0X29
	//{0x96,0xd0},
	//{0x97,0x02},    
           
	{0x2f,0x20},	//19.2M*4=76.8M   0x30

	{0x0b,0x48},//analog
	{0x30,0x80}, //00
	{0x0c,0x66}, //analog
	{0x0d,0x12},
	{0x13,0x0f},//10
	{0x14,0x00},
	{0x12,0x00},
	{0x6b,0x10},//11
	{0x6c,0x00},
	{0x6d,0x00},
	{0x6e,0x00},
	{0x6f,0x10},//11
	{0x73,0x11},//12
	{0x7a,0x10},//11
	{0x15,0x17},//18
	{0x71,0x18},//19
	{0x76,0x18},//19  
	{0x29,0x08},
	{0x18,0x01},
	{0x19,0x10},
	{0x1a,0xc3},//c1
	{0x1b,0x6f},
	{0x1d,0x11},//01
	{0x1e,0x00},//
	{0x1f,0x80},
	{0x20,0x7f},
	{0x22,0x3c},//
	{0x25,0xff},
	{0x2b,0x88},
	{0x2c,0x85},
	{0x2d,0x00},
	{0x2e,0x80},
	{0x27,0x38},
	{0x28,0x03},
	{0x70,0x1a},
	{0x72,0x18},//
	{0x74,0x18},    
	{0x75,0x18},
	{0x77,0x16},//18  
	{0x7f,0x19},       
	{0xfd,0x01}, 
	{0x5d,0x11}, 		//position
	{0x5f,0x00},		//延长
	{0x36,0x02},	//0x08	//延长00
	{0xfd,0x00}, //add
       {0xe7,0x03},  //add
       {0xe7,0x00}, //add
	{0xfd,0x01},  //add
	{0x2f,0x8f},	//0xff	//延长
	{0xfb,0x25},		//blacklevl
	{0x48,0x00},		//dp
	{0x49,0x99}, 
	{0xf2,0x0a},		//同SP2518 0xf4     
	{0xfd,0x02},//AE
	{0x52,0x34},
	{0x53,0x02},		//测试是否ae抖
	{0x54,0x0c},
	{0x55,0x08}, 
	{0x86,0x0c},		//其中满足条件帧数
	{0x87,0x10},		//检测总帧数
	{0x8b,0x10},   


	{0xfd,0x01},//fix status
	{0x5a,0x38},		//DP_gain
	{0xfd,0x02},
	{0xba,0x30},		//mean_dummy_low
	{0xbb,0x50},		//mean_low_dummy
	{0xbc,0xc0},		//rpc_heq_low
	{0xbd,0xa0},		//rpc_heq_dummy
	{0xb8,0x80},		//mean_nr_dummy
	{0xb9,0x90},		//mean_dummy_nr
	{0xfd,0x01},//rpc
	{0xe0,0x54},//6c 
	{0xe1,0x40},//54 
	{0xe2,0x38},//48 
	{0xe3,0x34},//40
	{0xe4,0x34},//40
	{0xe5,0x30},//
	{0xe6,0x30},//
	{0xe7,0x2e},//
	{0xe8,0x2e},//
	{0xe9,0x2e},//
	{0xea,0x2c},//38
	{0xf3,0x2c},//38
	{0xf4,0x2c},//38
	{0xfd,0x01},//ae min gain 
	{0x04,0xc0},		//rpc_max_indr
	{0x05,0x2c},//38		//1e//rpc_min_indr 
	{0x0a,0xc0},		//rpc_max_outdr
	{0x0b,0x2c},//38		//rpc_min_outdr 
	{0xfd,0x01},//ae target
	{0xeb,0x78},		 
	{0xec,0x78},		
	{0xed,0x05},
	{0xee,0x08},
	{0xfd,0x01},		//lsc
	{0x26,0x30},
	{0x27,0xdc},
	{0x28,0x05},
	{0x29,0x08},
	{0x2a,0x00},
	{0x2b,0x03},
	{0x2c,0x00},
	{0x2d,0x2f},
	{0xfd,0x01},		//RGain
	{0xa1,0x60},//52//46//0x3c//48		//left
	{0xa2,0x5c},//c//50//0x3f//58		//right
	{0xa3,0x46},//30//43//0x30//58		//up
	{0xa4,0x46},//30//44//0x38//50		//down
	{0xad,0x08},//06//08//0x08//08		//lu
	{0xae,0x03},//03//0a//0x0a//10		//ru
	{0xaf,0x03},//0a//0a//0x0a//10		//ld
	{0xb0,0x08},//06//06//0x06//10		//rd
	{0x18,0x00},//40		//left  
	{0x19,0x00},//50		//right 
	{0x1a,0x00},//32		//up    
	{0x1b,0x00},//30		//down  
	{0xbf,0x00},//a5		//lu    
	{0xc0,0x00},//a0		//ru    
	{0xc1,0x00},//08		//ld    
	{0xfa,0x00},//00		//rd   
  
	{0xa5,0x5a},//a//34//0x34//38	//GGain
	{0xa6,0x50},//40//3a//0x3a//48
	{0xa7,0x40},//30//30//0x30//48
	{0xa8,0x40},//30//38//0x38//40
	{0xb1,0x00},//00//00
	{0xb2,0x00},//00//00
	{0xb3,0x00},//00//00
	{0xb4,0x00},//00//00
	{0x1c,0x00},//28
	{0x1d,0x00},//40
	{0x1e,0x00},//
	{0xb9,0x00},//25 
	{0x21,0x00},//b0
	{0x22,0x00},//a0
	{0x23,0x00},//50
	{0x24,0x00},//0d  

	{0xa9,0x50},//40//30//0x38//38		//BGain
	{0xaa,0x50},//40//33//0x3c//48
	{0xab,0x40},//30//2d//0x30//46
	{0xac,0x40},//30//30//0x38//46
	{0xb5,0x00},//00//08
	{0xb6,0x00},//00//08
	{0xb7,0x00},//04//08
	{0xb8,0x00},//02//08
	{0xba,0x00},//12
	{0xbc,0x00},//30
	{0xbd,0x00},//31
	{0xbe,0x00},//
	{0x25,0x00},//a0
	{0x45,0x00},//a0
	{0x46,0x00},//12
	{0x47,0x00},//09    
	//awb
	{0xfd,0x02},
	{0x26,0xc9},
	{0x27,0x8b},
	{0x08,0x05},//add
	{0x09,0x06},//add
	{0x11,0x09},//add
	{0x1b,0x80},
	{0x1a,0x80},
	{0x18,0x27},
	{0x19,0x26},
	{0x2a,0x00},//01
	{0x2b,0x00},//10
	{0x28,0xf8},		//0xa0
	{0x29,0x08},
	//d65 88  ce 73
	{0x66,0x38},//48//37//42//38//35		//0x48
	{0x67,0x65},//68//57//6a//54//60		//0x69
	{0x68,0xb8},//c0//bc//f8//a7//ba//b0		//c8//0xb5//0xaa
	{0x69,0xea},//da//13//d2//ce//e0		//f4//0xda//0xed
	{0x6a,0xa5},//a6//
	//indoor 89
	{0x7c,0x25},//44//
	{0x7d,0x53},//60//
	{0x7e,0xe3},//0xe8//d5//
	{0x7f,0x10},//0x18//08//
	{0x80,0xa6},
	//cwf   8a
	{0x70,0x18},//24//15//2f		//0x3b
	{0x71,0x3d},//c//38//4a		//0x55
	{0x72,0x0	},	//0x28
	{0x73,0x25},//24		//0x45
	{0x74,0xaa},
	//tl84  8b 96 9b
	{0x6b,0x0c},//   0c//08//18
	{0x6c,0x30},//28//2c//24//34		//0x25//0x2f
	{0x6d,0x10},//15//12//17		//0x35
	{0x6e,0x30},////35//32		//0x52
	{0x6f,0xaa},
	//f   8c b4 8e
	{0x61,0xf2},
	{0x62,0x22},
	{0x63,0x28},
	{0x64,0x50},
	{0x65,0x6a},		//0x6a

	{0x75,0x80},
	{0x76,0x09},
	{0x77,0x02},
	{0x24,0x25},
	{0x0e,0x16},
	{0x3b,0x09},

	{0xfd,0x02},		// sharp
	{0xde,0x0f},

	{0xd2,0x02},//0x04		//控制黑白边；0-边粗，f-变细
	{0xd3,0x04},//0x06
	{0xd4,0x08},
	{0xd5,0x08},

	{0xd7,0x18},		//轮廓判断
	{0xd8,0x25},
	{0xd9,0x32},
	{0xda,0x40},
	{0xdb,0x08},

	{0xe8,0x48},//0x40		//轮廓强度
	{0xe9,0x48},//0x38
	{0xea,0x30},
	{0xeb,0x20},

	{0xec,0x48},//0x40
	{0xed,0x48},//0x40
	{0xee,0x30},
	{0xef,0x20},

	{0xf3,0x00},		//平坦区域锐化力度
	{0xf4,0x00},
	{0xf5,0x00},
	{0xf6,0x00},

	{0xfd,0x02},		//skin sharpen
	{0xdc,0x04},		//肤色降锐化
	{0x05,0x6f},		//排除肤色降锐化对分辨率卡引起的干扰
	{0x09,0x10},		//肤色排除白点区域
	{0xfd,0x01},		//dns
	{0x64,0x55},//0x44//22		//沿方向边缘平滑力度  //0-最强，8-最弱
	{0x65,0x22},		
	{0x86,0x20},		//沿方向边缘平滑阈值，越小越弱
	{0x87,0x20},		
	{0x88,0x20},		
	{0x89,0x20},		
	{0x6d,0x02},//0x04//0f		//强平滑（平坦）区域平滑阈值
	{0x6e,0x04},//0x06//0f		
	{0x6f,0x0a},		
	{0x70,0x10},	  	
	{0x71,0x04},//0x08//0d		//弱轮廓（非平坦）区域平滑阈值	
	{0x72,0x08},//0x12//23	   	
	{0x73,0x1c},//
	{0x74,0x24},//
	{0x75,0x44},//46		//[7:4]平坦区域强度，[3:0]非平坦区域强度；0-最强，8-最弱；
	{0x76,0x02},//36		
	{0x77,0x02},//25		
	{0x78,0x02},//12		
	{0x81,0x10},//
	{0x82,0x20},//
	{0x83,0x30},//ff		//8x
	{0x84,0x48},//ff		//16x
	{0x85,0x0a},		// 12/8+reg0x81 第二阈值，在平坦和非平坦区域做连接
	{0xfd,0x01},		//gamma  
	{0x8b,0x00},//00////00//00//00//00//00//     
	{0x8c,0x07},//02////02//0b//0b//10//07//     
	{0x8d,0x10},//0a////0a//19//17//20//11//     
	{0x8e,0x1b},//13////13//2a//27//31//1d//     
	{0x8f,0x27},//
	{0x90,0x3b},//30////30//4b//51//53//3a//     
	{0x91,0x4b},//40////40//5e//64//64//4a//     
	{0x92,0x5b},//
	{0x93,0x6a},//5a////5a//78//80//80//69//     
	{0x94,0x83},//71////71//92//92//92//81//     
	{0x95,0x95},//85////85//a6//a2//a2//95//     
	{0x96,0xa6},//96////96//b5//af//af//a6//     
	{0x97,0xb5},//a6////a6//bf//bb//bb//b6//     
	{0x98,0xc1},//b3////b3//ca//c6//c6//c3//     
	{0x99,0xca},//c0////c0//d2//d0//d0//cd//     
	{0x9a,0xd2},//cb////cb//d9//d9//d9//d5//     
	{0x9b,0xdb},//d5////d5//e1//e0//e0//dd//     
	{0x9c,0xe3},//df////df//e8//e8//e8//e3//     
	{0x9d,0xeb},//e9////e9//ee//ee//ee//e8//     
	{0x9e,0xf3},//f2////f2//f4//f4//f4//ed//     
	{0x9f,0xfa},//fa//fa//fa//fa//fa// f2//    
	{0xa0,0xff},//ff//ff//ff//ff//ff// f7//    
	//ccm   
	{0xfd,0x02},		//CCM
	{0x15,0xb0},//0xab		//b>th  a0 a4  a6   95 c3
	{0x16,0x95},//0x90	  //r<th  88 87  8f   ae 7d

	{0xa0,0x80},//0x99//0x80//99//0x99//a6//a6//8c//80// 非F
	{0xa1,0x00},//0xf4//0x00//0c//0x0c//da//da//da//fa//00//
	{0xa2,0x00},//0xf4//0x00//da//0xda//00//00//00//fa//00//
	{0xa3,0xf4},//0xf4//00//0x00//e7//e7//da//da//e7//
	{0xa4,0x80},//0xa6//8c//0x99//c0//c0//c0//c0//a6//  
	{0xa5,0x0c},//0xe7//f4//0xe7//da//da//e7//e7//f4//
	{0xa6,0xf4},//0xed//00//0x00//00//00//00//00//00//
	{0xa7,0xe7},//0x06//e7//0xe7//b4//b4//a7//cd//da//
	{0xa8,0xa6},//0x8c//99//0x99//cc//d9//b3//a6//
	{0xa9,0x00},//0x3c//0x00//30//0x30//0c//0c//0c//3c//00//
	{0xaa,0x03},//0x33//30//0x30//33//33//33//33//33//
	{0xab,0x0f},//0x03//0c//0x0c//0c//0c//0c//0c//0c//

	{0xac,0x99},//0x99//0x99//80//a2//b3//8c//F  
	{0xad,0x26},//0x26//0x26//00//04//0c//0c//
	{0xae,0xc0},//0xc0//0xc0//00//da//c0//e7//
	{0xaf,0x00},//0x00//0xed//e7//cd//cd//b4//
	{0xb0,0x93},//0xa6//0xcc//c0//d9//e6//e6//  
	{0xb1,0xed},//0xda//0xcd//da//da//cd//e7//
	{0xb2,0xed},//0xed//0xed//e7//f6//e7//e7//
	{0xb3,0xda},//0xda//0xda//b4//98//9a//9a//
	{0xb4,0xb9},//0xb9//0xb9//e6//f3//00//00//   
	{0xb5,0x30},//0x30//0x30//00//30//30//30//
	{0xb6,0x30},//0x30//0x33//33//33//33//33//
	{0xb7,0x0f},//0x0f//0x0f//0f//0f//1f//1f// 

	{0xfd,0x01},		//sat u 
	{0xd3,0x86},//0x8a//0x86	//过标准118%  
	{0xd4,0x86},//0x8a//0x86		
	{0xd5,0x82},//0x86//0x82	
	{0xd6,0x7a},//0x7e:0x7a	
	{0xd7,0x86},//0x8a//0x86	//sat v 
	{0xd8,0x86},//0x8a//0x86		    
	{0xd9,0x82},//0x86//0x82		
	{0xda,0x7a},//0x7e//0x7a	      	  
	{0xfd,0x01},		//auto_sat
	{0xd2,0x00},		//autosa_en
	{0xfd,0x01},		//uv_th	
	{0xc2,0xee},   //白色物体表面有彩色噪声降低此值  
	{0xc3,0xee},
	{0xc4,0xdd},
	{0xc5,0xbb},

	{0xfd,0x01},		//low_lum_offset
	{0xcd,0x10},
	{0xce,0x1f},
  
	{0xfd,0x02},		//gw
	{0x35,0x6f},
	{0x37,0x13},
	{0xfd,0x01},		//heq
	{0xdb,0x00},  
	{0x10,0x00}, 
	{0x11,0x00}, 
	{0x12,0x00}, 
	{0x13,0x00}, 
	{0x14,0x10},//15  
	{0x15,0x06},//0a
	{0x16,0x06},//0a
	{0x17,0x02},//05 
	{0xfd,0x02},		//cnr 找张国华解释  
	{0x8e,0x10}, 
	{0x90,0x20},
	{0x91,0x20},
	{0x92,0x60},
	{0x93,0x80},
	{0xfd,0x02},		//auto 
	{0x85,0x00},	//12 enable 50Hz/60Hz function
	{0xfd,0x01}, 
	{0x00,0x00}, 	//fix mode   
	//{0x32,0x15},//		//ae en
	{0x33,0xef},		//lsc\bpc en
	{0x34,0xc7},		//ynr\cnr\gamma\color en
	{0x35,0x00},		//YUYV
	{0xfd,0x00},		  	
	//{0x31,0x71},
	{0x19,0x10},  //720p  
	{0x30,0x00},  
};
static const struct sp1628_reg sp1628_regs_vga[] = {
	{0xfd,0x00},
	{0x94,0x80}, 
	{0x95,0x02},
	{0x96,0xe0},
	{0x97,0x01},   

	{0x19,0x17}, 
	{0x30,0x00},
	{0x31,0x74},

	{0xfd,0x01},
	{0x4a,0x00}, 
	{0x4b,0x03},
	{0x4c,0xc0},
	{0x4d,0x00},    
	{0x4e,0x05}, 
	{0x4f,0x00},

	{0xfd,0x00},           
	{0x2f,0x20},	//19.2M*3=57.6M  

	{0xfd,0x00},//ae setting 57.6M fix 30fps 25fps
	{0x03,0x07},
	{0x04,0x2c},
	{0x05,0x00},
	{0x06,0xB3},//01
	{0x09,0x00},
	{0x0a,0x12},
	{0xfd,0x01},
	{0xf0,0x01},
	{0xf7,0x32},
	{0xf8,0xfe},
	{0x02,0x03},
	{0x03,0x01},
	{0x06,0x32},
	{0x07,0x01},
	{0x08,0x01},
	{0x09,0x00},
	{0xfd,0x02},
	{0x40,0x04},
	{0x41,0xfe},
	{0x42,0x00},
	{0x88,0x3d},
	{0x89,0x04},
	{0x8a,0x2a},
	{0xfd,0x02},//Status
	{0xbe,0x96},
	{0xbf,0x03},
	{0xd0,0x96},
	{0xd1,0x03},
	{0xfd,0x01},
	{0x5b,0x03},
	{0x5c,0x96},
	{0xfd,0x00},

	{0xfd,0x01},//04
  {0x32,0x15},//08

};

static const struct sp1628_reg sp1628_regs_720p[] = {
	{0xfd,0x00},
	{0x94,0x00}, 
	{0x95,0x05},
	{0x96,0xd0},
	{0x97,0x02},   

	{0x19,0x10}, 
	{0x30,0x00},
	{0x31,0x71},

	{0xfd,0x01},
	{0x4a,0x00}, 
	{0x4b,0x03},
	{0x4c,0xc0},
	{0x4d,0x00},    
	{0x4e,0x05}, 
	{0x4f,0x00},

	{0xfd,0x00},        
	{0x2f,0x20},	//19.2M*4=76.8M  
	#if 1
	{0xfd,0x00},//ae setting  pll 3 fix21fps
	{0x03,0x04},
	{0x04,0x08},
	{0x05,0x00},
	{0x06,0x32},
	{0x09,0x00},
	{0x0a,0x39},
	{0xfd,0x01},
	{0xf0,0x00},
	{0xf7,0xac},
	{0xf8,0x8e},
	{0x02,0x04},
	{0x03,0x01},
	{0x06,0xac},
	{0x07,0x00},
	{0x08,0x01},
	{0x09,0x00},
	{0xfd,0x02},
	{0x40,0x05},
	{0x41,0x8e},
	{0x42,0x00},
	{0x88,0xfa},
	{0x89,0x9b},
	{0x8a,0x32},
	{0xfd,0x02},//Status
	{0xbe,0xb0},
	{0xbf,0x02},
	{0xd0,0xb0},
	{0xd1,0x02},
	{0xfd,0x01},
	{0x5b,0x02},
	{0x5c,0xb0},
	{0xfd,0x00},
  	#endif
	{0xfd,0x01},//04
	{0x32,0x15},//08

};
static const struct sp1628_reg sp1628_regs_480p[]  ={
	{0xfd,0x00},
	{0x94,0xd0}, 
	{0x95,0x02},
	{0x96,0xe0},
	{0x97,0x01},   

	{0x19,0x10}, 
	{0x30,0x00},
	{0x31,0x71},

	{0xfd,0x01},
	{0x4a,0x78}, 
	{0x4b,0x01},
	{0x4c,0xe0},
	{0x4d,0xff},  //0118  
	{0x4e,0x02}, 
	{0x4f,0xd0},

	{0xfd,0x00},       
	{0x2f,0x20},	//19.2M*4=76.8M 

	#if 1
	{0xfd,0x00},//ae setting  pll 3 fix21fps
	{0x03,0x04},
	{0x04,0x08},
	{0x05,0x00},
	{0x06,0x32},
	{0x09,0x00},
	{0x0a,0x39},
	{0xfd,0x01},
	{0xf0,0x00},
	{0xf7,0xac},
	{0xf8,0x8e},
	{0x02,0x04},
	{0x03,0x01},
	{0x06,0xac},
	{0x07,0x00},
	{0x08,0x01},
	{0x09,0x00},
	{0xfd,0x02},
	{0x40,0x05},
	{0x41,0x8e},
	{0x42,0x00},
	{0x88,0xfa},
	{0x89,0x9b},
	{0x8a,0x32},
	{0xfd,0x02},//Status
	{0xbe,0xb0},
	{0xbf,0x02},
	{0xd0,0xb0},
	{0xd1,0x02},
	{0xfd,0x01},
	{0x5b,0x02},
	{0x5c,0xb0},
	{0xfd,0x00},
  	#endif
	{0xfd,0x01},//04
	{0x32,0x15},//08


};
/* Supported resolutions */
enum {
	
	sp1628_RES_VGA,
	sp1628_RES_720P,
	sp1628_RES_480P,
	
};


#define sp1628_RES_720P_SIZE_H		1280
#define sp1628_RES_720P_SIZE_V		720
#define sp1628_RES_480P_SIZE_H		720
#define sp1628_RES_480P_SIZE_V		480
#define sp1628_RES_VGA_SIZE_H		640
#define sp1628_RES_VGA_SIZE_V		480

struct sp1628_res_struct {
	u8 *desc;
	int res;
	int width;
	int height;
	int fps;
	int skip_frames;
	bool used;
	struct regval_list *regs;
};

struct sp1628_control {
	struct v4l2_queryctrl qc;
	int (*query)(struct v4l2_subdev *sd, s32 *value);
	int (*tweak)(struct v4l2_subdev *sd, int value);
};

static struct sp1628_res_struct sp1628_res[] = {
	
	{
	.desc	= "VGA",
	.res	= sp1628_RES_VGA,
	.width	= 640,
	.height	= 480,
	.fps	=30,
	.used	= 0,
	.regs	= NULL,
	.skip_frames =1,  
	},
	{
	.desc	= "480p",
	.res	=sp1628_RES_480P,
	.width	= 720,
	.height	= 480,
	.fps	=30,
	.used	= 0,
	.regs	= NULL,
	.skip_frames = 1,  // modified by yaolinglingfrom 2 to 3  for switch capture mode to video mode ,  it shows green  on lcd 
	},
	{
	.desc	= "720p",
	.res	= sp1628_RES_720P,
	.width	= 1280,
	.height	= 720,
	.fps	=30,
	.used	= 0,
	.regs	= NULL,
	.skip_frames = 1,
	}, 
	
};
#define N_RES (ARRAY_SIZE(sp1628_res))

struct sp1628_device {
	struct v4l2_subdev sd;
	struct media_pad pad;
	struct v4l2_mbus_framefmt format;

	struct camera_sensor_platform_data *platform_data;
	int real_model_id;
	int nctx;
	int power;

	unsigned int bus_width;
	unsigned int mode;
	unsigned int field_inv;
	unsigned int field_sel;
	unsigned int ycseq;
	unsigned int conv422;
	unsigned int bpat;
	unsigned int hpol;
	unsigned int vpol;
	unsigned int edge;
	unsigned int bls;
	unsigned int gamma;
	unsigned int cconv;
	unsigned int res;
	unsigned int dwn_sz;
	unsigned int blc;
	unsigned int agc;
	unsigned int awb;
	unsigned int aec;
	/* extention SENSOR version 2 */
	unsigned int cie_profile;

	/* extention SENSOR version 3 */
	unsigned int flicker_freq;

	/* extension SENSOR version 4 */
	unsigned int smia_mode;
	unsigned int mipi_mode;

	/* Add name here to load shared library */
	unsigned int type;

	/*Number of MIPI lanes*/
	unsigned int mipi_lanes;
	char name[32];

	u8 lightfreq;
};

